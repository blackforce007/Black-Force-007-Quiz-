// DOM elements
const themeToggle = document.getElementById('theme-toggle');
const quizScreen = document.getElementById('quiz-screen');
const resultsScreen = document.getElementById('results-screen');
const questionText = document.getElementById('question-text');
const answerOptions = document.getElementById('answer-options');
const nextButton = document.getElementById('next-button');
const timerDisplay = document.getElementById('timer-display');
const scoreDisplay = document.getElementById('score-display');
const streakDisplay = document.getElementById('streak-display');
const finalScoreDisplay = document.getElementById('final-score');
const totalTimeDisplay = document.getElementById('total-time');
const correctCountDisplay = document.getElementById('correct-count');
const wrongCountDisplay = document.getElementById('wrong-count');
const restartQuizButton = document.getElementById('restart-quiz');
const shareScoreButton = document.getElementById('share-score');
const feedbackArea = document.getElementById('feedback-area');

// Game State Variables
let currentQuestionIndex = 0;
let score = 0;
let correctAnswersCount = 0;
let wrongAnswersCount = 0;
let currentStreak = 0; // ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßÄ‡¶ï ‡¶¨‡ßã‡¶®‡¶æ‡¶∏
let timerInterval;
const TIME_PER_QUESTION = 30; // ‚úÖ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ (‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ßß‡ß´ /30 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°)
let timeLeft = TIME_PER_QUESTION;
let totalTimeElapsed = 0;
let gameActive = true;

const BASE_POINT = 10;
const TIME_BONUS_MULTIPLIER = 1; // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü
const STREAK_BONUS_PER_CORRECT = 5; // ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßÄ‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü

// --- Utility Functions ---

/**
 * ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ
 */
function startTimer() {
    clearInterval(timerInterval);
    timeLeft = TIME_PER_QUESTION;
    timerDisplay.textContent = `‡¶∏‡¶Æ‡¶Ø‡¶º: ${timeLeft}s`;

    timerInterval = setInterval(() => {
        if (!gameActive) {
            clearInterval(timerInterval);
            return;
        }

        timeLeft--;
        totalTimeElapsed++;
        timerDisplay.textContent = `‡¶∏‡¶Æ‡¶Ø‡¶º: ${timeLeft}s`;

        if (timeLeft <= 5) {
            timerDisplay.style.color = 'var(--error-color)';
        } else {
            timerDisplay.style.color = 'var(--primary-color)';
        }

        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            handleAnswer(null); // ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶®‡¶æ ‡¶¶‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
        }
    }, 1000);
}

/**
 * ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶≤‡ßã‡¶Æ‡ßá‡¶≤‡ßã ‡¶ï‡¶∞‡¶æ
 * @param {Array} options - ‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá
 * @returns {Array} ‡¶è‡¶≤‡ßã‡¶Æ‡ßá‡¶≤‡ßã ‡¶Ö‡¶™‡¶∂‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá
 */
function shuffleOptions(options) {
    const shuffled = [...options];
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
}

// --- Main Quiz Logic ---

/**
 * ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡ßã‡¶° ‡¶è‡¶¨‡¶Ç ‡¶°‡¶ø‡¶∏‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ
 */
function loadQuestion() {
    if (currentQuestionIndex >= availableQuestions.length) {
        endQuiz();
        return;
    }

    const currentQuiz = availableQuestions[currentQuestionIndex];

    // ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶® ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
    answerOptions.innerHTML = '';
    feedbackArea.innerHTML = '';
    nextButton.disabled = true;
    nextButton.textContent = "‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®";
    timerDisplay.style.color = 'var(--primary-color)';

    // ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶°‡¶ø‡¶∏‡¶™‡ßç‡¶≤‡ßá
    questionText.textContent = currentQuiz.question;
    const shuffledOptions = shuffleOptions(currentQuiz.options); // ‡¶Ö‡¶™‡¶∂‡¶® ‡¶è‡¶≤‡ßã‡¶Æ‡ßá‡¶≤‡ßã ‡¶ï‡¶∞‡¶æ

    // ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø
    shuffledOptions.forEach(option => {
        const button = document.createElement('button');
        button.textContent = option;
        button.classList.add('option-btn');
        button.addEventListener('click', () => handleAnswer(button, option, currentQuiz.answer));
        answerOptions.appendChild(button);
    });

    startTimer();
}

/**
 * ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ
 * @param {HTMLButtonElement} selectedButton - ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶¨‡¶æ‡¶ü‡¶® (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
 * @param {string} selectedAnswer - ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶â‡¶§‡ßç‡¶§‡¶∞ (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
 * @param {string} correctAnswer - ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞
 */
function handleAnswer(selectedButton, selectedAnswer, correctAnswer) {
    if (!gameActive) return;

    clearInterval(timerInterval);
    const isCorrect = selectedAnswer === correctAnswer;

    // ‡¶∏‡¶¨ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶°‡¶ø‡¶∏‡ßá‡¶¨‡¶≤ ‡¶ï‡¶∞‡¶æ
    document.querySelectorAll('.option-btn').forEach(btn => btn.disabled = true);

    if (isCorrect) {
        // ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶ó‡¶£‡¶®‡¶æ: ‡¶¨‡ßá‡¶∏ ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü + ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ + ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßÄ‡¶ï ‡¶¨‡ßã‡¶®‡¶æ‡¶∏
        const timeBonus = timeLeft * TIME_BONUS_MULTIPLIER;
        currentStreak++;
        const streakBonus = currentStreak * STREAK_BONUS_PER_CORRECT;
        const earnedPoints = BASE_POINT + timeBonus + streakBonus;

        score += earnedPoints;
        correctAnswersCount++;

        // ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶ü‡¶® ‡¶π‡¶æ‡¶á‡¶≤‡¶æ‡¶á‡¶ü
        selectedButton.classList.add('correct');
        feedbackArea.innerHTML = `<span style="color:var(--success-color); font-weight:bold;">‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞! ‡¶Ü‡¶™‡¶®‡¶ø ${earnedPoints.toFixed(0)} ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßá‡¶≤‡ßá‡¶®!</span>`;
    } else {
        currentStreak = 0; // ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßÄ‡¶ï ‡¶¨‡ßç‡¶∞‡ßá‡¶ï
        wrongAnswersCount++;

        // ‡¶≠‡ßÅ‡¶≤ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶π‡¶æ‡¶á‡¶≤‡¶æ‡¶á‡¶ü
        if (selectedButton) {
            selectedButton.classList.add('wrong');
        }

        // ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶π‡¶æ‡¶á‡¶≤‡¶æ‡¶á‡¶ü (‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º)
        document.querySelectorAll('.option-btn').forEach(btn => {
            if (btn.textContent === correctAnswer) {
                btn.classList.add('correct');
            }
        });

        // ‡¶´‡¶ø‡¶°‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï
        const feedbackText = selectedButton ? "‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞!" : "‚è≥ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∂‡ßá‡¶∑!";
        feedbackArea.innerHTML = `<span style="color:var(--error-color); font-weight:bold;">${feedbackText} ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ü‡¶ø ‡¶π‡¶≤‡ßã: ${correctAnswer}</span>`;
    }

    // ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßÄ‡¶ï ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
    scoreDisplay.textContent = `‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü: ${score.toFixed(0)}`;
    streakDisplay.textContent = `‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßÄ‡¶ï: ${currentStreak}`;

    nextButton.disabled = false;
    nextButton.focus(); // ‡¶®‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶´‡ßã‡¶ï‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶æ
}

/**
 * ‡¶®‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
 */
nextButton.addEventListener('click', () => {
    currentQuestionIndex++;
    if (currentQuestionIndex < availableQuestions.length) {
        loadQuestion();
    } else {
        endQuiz();
    }
});

/**
 * ‡¶ó‡ßá‡¶Æ ‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶°‡¶ø‡¶∏‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ
 */
function endQuiz() {
    gameActive = false;
    clearInterval(timerInterval);
    quizScreen.classList.add('hidden');
    resultsScreen.classList.remove('hidden');

    finalScoreDisplay.textContent = score.toFixed(0);
    totalTimeDisplay.textContent = `${totalTimeElapsed}s`;
    correctCountDisplay.textContent = correctAnswersCount;
    wrongCountDisplay.textContent = wrongAnswersCount;

    saveScore(score); // ‡¶≤‡¶ø‡¶°‡¶æ‡¶∞‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
    checkAchievements(); // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ö‡¶ø‡¶≠‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
}

/**
 * ‡¶ó‡ßá‡¶Æ‡¶ü‡¶ø ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
 */
restartQuizButton.addEventListener('click', () => {
    // ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶ø ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ: ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶è‡¶≤‡ßã‡¶Æ‡ßá‡¶≤‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
    availableQuestions = shuffleQuestions(allQuestions);
    currentQuestionIndex = 0;
    score = 0;
    correctAnswersCount = 0;
    wrongAnswersCount = 0;
    currentStreak = 0;
    totalTimeElapsed = 0;
    gameActive = true;

    scoreDisplay.textContent = '‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü: 0';
    streakDisplay.textContent = '‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßÄ‡¶ï: 0';
    timerDisplay.textContent = '‡¶∏‡¶Æ‡¶Ø‡¶º: 30s';

    resultsScreen.classList.add('hidden');
    quizScreen.classList.remove('hidden');

    loadQuestion();
});

// --- UI/UX and Advanced Features ---

/**
 * ‡¶°‡¶æ‡¶∞‡ßç‡¶ï/‡¶≤‡¶æ‡¶á‡¶ü ‡¶Æ‡ßã‡¶° ‡¶ü‡¶ó‡¶≤ ‡¶ï‡¶∞‡¶æ
 */
themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('light-mode');
    // ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
});

/**
 * ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ (Share API ‡¶¨‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶§‡ßà‡¶∞‡¶ø)
 */
shareScoreButton.addEventListener('click', () => {
    const shareText = `‡¶Ü‡¶Æ‡¶ø Black Force 007 Quiz ‡¶è ${score.toFixed(0)} ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø! üòé ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞: ${correctAnswersCount}, ‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞: ${wrongAnswersCount}. ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®!`;

    if (navigator.share) {
        // Web Share API ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶® ‡¶ï‡¶∞‡¶≤‡ßá
        navigator.share({
            title: 'Black Force 007 Quiz Score',
            text: shareText
        }).catch(error => console.error('Error sharing:', error));
    } else {
        // ‡¶´‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï: ‡¶ï‡ßç‡¶≤‡¶ø‡¶™‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ
        navigator.clipboard.writeText(shareText).then(() => {
            alert("‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶∏‡ßã‡¶∂‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶Ø‡¶º ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
        });
    }
});

/**
 * ‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶® ‡¶Æ‡ßã‡¶° (‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶≤‡¶ø‡¶°‡¶æ‡¶∞‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶è‡¶¨‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ö‡¶ø‡¶≠‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶∏)
 */
function getLeaderboard() {
    const leaderboard = JSON.parse(localStorage.getItem('bf007_leaderboard')) || [];
    return leaderboard.sort((a, b) => b.score - a.score).slice(0, 10); // ‡¶ü‡¶™ ‡ßß‡ß¶
}

function saveScore(newScore) {
    const leaderboard = getLeaderboard();
    const newEntry = {
        id: Date.now(),
        score: newScore,
        date: new Date().toLocaleDateString('bn-BD')
    };

    leaderboard.push(newEntry);
    const updatedLeaderboard = leaderboard.sort((a, b) => b.score - a.score).slice(0, 10);
    localStorage.setItem('bf007_leaderboard', JSON.stringify(updatedLeaderboard));

    renderLeaderboard();
}

function renderLeaderboard() {
    const leaderboardList = document.getElementById('leaderboard-list');
    const leaderboard = getLeaderboard();
    leaderboardList.innerHTML = '';

    if (leaderboard.length === 0) {
        leaderboardList.innerHTML = '<li>‡¶è‡¶ñ‡¶®‡¶ì ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶®‡ßá‡¶á‡•§</li>';
        return;
    }

    leaderboard.forEach((entry, index) => {
        const listItem = document.createElement('li');
        listItem.innerHTML = `
            <span>#${index + 1}</span>
            <span>‡¶∏‡ßç‡¶ï‡ßã‡¶∞: ${entry.score.toFixed(0)}</span>
            <span>‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${entry.date}</span>
        `;
        leaderboardList.appendChild(listItem);
    });
}

// --- Achievement System ---
const achievements = [
    { id: 'first_win', name: '‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∏‡¶æ‡¶´‡¶≤‡ßç‡¶Ø', description: '‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡¶¨‡¶æ‡¶∞ ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§', condition: () => true },
    { id: 'master_mind', name: '‡¶ú‡ßç‡¶û‡¶æ‡¶®‡ßá‡¶∞ ‡¶ó‡ßÅ‡¶∞‡ßÅ', description: '‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡ß´‡ß¶‡ß¶-‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®‡•§', condition: () => score > 500 },
    { id: 'streak_king', name: '‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßÄ‡¶ï ‡¶ï‡¶ø‡¶Ç', description: '‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß´‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßÄ‡¶ï ‡¶¨‡¶ú‡¶æ‡¶Ø‡¶º ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®‡•§', condition: () => currentStreak >= 5 },
    // ‡¶Ü‡¶∞‡¶ì ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ö‡¶ø‡¶≠‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
];

function checkAchievements() {
    const earned = JSON.parse(localStorage.getItem('bf007_achievements')) || {};
    let newAchievementUnlocked = false;

    achievements.forEach(ach => {
        if (!earned[ach.id] && ach.condition()) {
            earned[ach.id] = true;
            newAchievementUnlocked = true;
            console.log(`üéâ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ö‡¶ø‡¶≠‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶®‡¶≤‡¶ï‡¶°: ${ach.name}`);
            // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§
        }
    });

    if (newAchievementUnlocked) {
        localStorage.setItem('bf007_achievements', JSON.stringify(earned));
    }
    renderAchievements();
}

function renderAchievements() {
    const achievementList = document.getElementById('achievement-list');
    const earned = JSON.parse(localStorage.getItem('bf007_achievements')) || {};
    achievementList.innerHTML = '';

    achievements.forEach(ach => {
        const item = document.createElement('div');
        item.classList.add('achievement-item');
        if (earned[ach.id]) {
            item.classList.add('achieved');
            item.innerHTML = `<h3>${ach.name} ‚úÖ</h3><p>${ach.description}</p>`;
        } else {
            item.innerHTML = `<h3>${ach.name} üîí</h3><p>${ach.description}</p>`;
            item.style.opacity = 0.6;
        }
        achievementList.appendChild(item);
    });
}


// Initialization
document.addEventListener('DOMContentLoaded', () => {
    // ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶è‡¶≤‡ßã‡¶Æ‡ßá‡¶≤‡ßã ‡¶ï‡¶∞‡ßÅ‡¶®
    availableQuestions = shuffleQuestions(allQuestions);
    loadQuestion();
    renderLeaderboard();
    renderAchievements();
});
